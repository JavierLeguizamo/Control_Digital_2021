
Primer_Programa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000180  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  000001f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006eb  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000633  00000000  00000000  0000097f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000024c  00000000  00000000  00000fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001200  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037f  00000000  00000000  00001284  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c6  00000000  00000000  00001603  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000016c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 30       	cpi	r26, 0x0A	; 10
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  88:	0c 94 be 00 	jmp	0x17c	; 0x17c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_21>:
#define F_CPU 8e6
#include <avr/io.h>
#include <avr/interrupt.h>
int y[4],xn;

ISR(ADC_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
  a6:	ef 93       	push	r30
  a8:	ff 93       	push	r31
	xn=ADC;
  aa:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  ae:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  b2:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
  b6:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
	y[0]=5*xn+2*y[1]+4*y[2]+3*y[3];
  ba:	e2 e0       	ldi	r30, 0x02	; 2
  bc:	f1 e0       	ldi	r31, 0x01	; 1
  be:	82 81       	ldd	r24, Z+2	; 0x02
  c0:	93 81       	ldd	r25, Z+3	; 0x03
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	a9 01       	movw	r20, r18
  c8:	44 0f       	add	r20, r20
  ca:	55 1f       	adc	r21, r21
  cc:	44 0f       	add	r20, r20
  ce:	55 1f       	adc	r21, r21
  d0:	24 0f       	add	r18, r20
  d2:	35 1f       	adc	r19, r21
  d4:	28 0f       	add	r18, r24
  d6:	39 1f       	adc	r19, r25
  d8:	84 81       	ldd	r24, Z+4	; 0x04
  da:	95 81       	ldd	r25, Z+5	; 0x05
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	a9 01       	movw	r20, r18
  e6:	48 0f       	add	r20, r24
  e8:	59 1f       	adc	r21, r25
  ea:	26 81       	ldd	r18, Z+6	; 0x06
  ec:	37 81       	ldd	r19, Z+7	; 0x07
  ee:	c9 01       	movw	r24, r18
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	28 0f       	add	r18, r24
  f6:	39 1f       	adc	r19, r25
  f8:	ca 01       	movw	r24, r20
  fa:	82 0f       	add	r24, r18
  fc:	93 1f       	adc	r25, r19
  fe:	91 83       	std	Z+1, r25	; 0x01
 100:	80 83       	st	Z, r24
	y[1]=y[0];
 102:	93 83       	std	Z+3, r25	; 0x03
 104:	82 83       	std	Z+2, r24	; 0x02
	y[2]=y[1];
 106:	95 83       	std	Z+5, r25	; 0x05
 108:	84 83       	std	Z+4, r24	; 0x04
	y[3]=y[2];
 10a:	97 83       	std	Z+7, r25	; 0x07
 10c:	86 83       	std	Z+6, r24	; 0x06
}
 10e:	ff 91       	pop	r31
 110:	ef 91       	pop	r30
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	5f 91       	pop	r21
 118:	4f 91       	pop	r20
 11a:	3f 91       	pop	r19
 11c:	2f 91       	pop	r18
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <__vector_14>:

ISR(TIMER0_COMPA_vect){
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
	
}
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <main>:

int main(void)
{
    DDRB |= 0xff;
 13c:	84 b1       	in	r24, 0x04	; 4
 13e:	9f ef       	ldi	r25, 0xFF	; 255
 140:	94 b9       	out	0x04, r25	; 4
	ADMUX |= 1<<REFS0;
 142:	ec e7       	ldi	r30, 0x7C	; 124
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	80 64       	ori	r24, 0x40	; 64
 14a:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADEN) | _BV(ADATE) | _BV(ADIE) | _BV(ADPS0);
 14c:	ea e7       	ldi	r30, 0x7A	; 122
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	89 6a       	ori	r24, 0xA9	; 169
 154:	80 83       	st	Z, r24
	ADCSRB |= _BV(ADTS0) | _BV(ADTS1);
 156:	eb e7       	ldi	r30, 0x7B	; 123
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	83 60       	ori	r24, 0x03	; 3
 15e:	80 83       	st	Z, r24
	OCR0A = 255;
 160:	97 bd       	out	0x27, r25	; 39
	TCCR0A |=_BV(WGM01);
 162:	84 b5       	in	r24, 0x24	; 36
 164:	82 60       	ori	r24, 0x02	; 2
 166:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= _BV(CS01);
 168:	85 b5       	in	r24, 0x25	; 37
 16a:	82 60       	ori	r24, 0x02	; 2
 16c:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= _BV(OCIE0A);
 16e:	ee e6       	ldi	r30, 0x6E	; 110
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	82 60       	ori	r24, 0x02	; 2
 176:	80 83       	st	Z, r24
	sei();
 178:	78 94       	sei
 17a:	ff cf       	rjmp	.-2      	; 0x17a <main+0x3e>

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
